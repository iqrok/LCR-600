const EventEmitter=require("events"),bitops=require("../class/bitOperations.class"),__serial=require("../class/serial.class"),__HEADER__=126,__ESC__=27,__POLYNOMIAL__=4129,__TEMPLATE__=function(to=0,from=255){this.to=to,this.from=from,this.status=1,this.length=0,this.data=[0]},___RECEIVED_DATA__=function(lastValue=null){this.lastValue=lastValue,this.onProcess=!1,this.sameValueTimer=0,this.summary={value:{start:null,finish:null,get total(){return null!==this.finish?this.finish-this.start:0}},time:{start:null,finish:null,get duration(){return null!==this.finish?this.finish-this.start:0},get _summary(){return this.start&&this.finish?{start:this.start,finish:this.finish,duration:this.duration}:void 0}}}},_FIELDS=require("../LCR_constants/LCR.fields"),_LIST=require("../LCR_constants/LCR.list"),_RCODES=require("../LCR_constants/LCR.rcodes"),_RECEIVED_DATA={};class LCR600 extends EventEmitter{constructor(config,debug=!1){super(),this.init(config,debug)}init(config,debug=!1){this.LCRNodeAddress=config.LCRNodeAddress?config.LCRNodeAddress:0,this.hostAddress=config.hostAddress?config.hostAddress:255,this.config=config,this.config.baud=config.baud||19200,this.debug=debug,this.message=new __TEMPLATE__(this.LCRNodeAddress,this.hostAddress),this.attributes={},this._currentField=void 0,this._msLimit=1e3}async connect(){const self=this;self.serial=new __serial({...self.config,autoopen:!1,parser:{type:"InterByteTimeout",interval:30}},self.debug),self.serial.on("open",received=>{self._emit("open",received)}),self.serial.on("error",received=>{self._emit("error",received)}),self.serial.on("close",received=>{self._emit("close",received)}),self.serial.on("data",received=>{const response=self._parseResponse(received);if(void 0!=self._currentField)self._handleResponseField(response);else{const{data:data}=response,{status:status,fieldData:fieldData}=data;switch(status){case 2:const summary={name:"productId",value:self._readFieldData(fieldData,"TEXT")};self._setAttribute(summary.name,summary.value),self._emit("data",summary);break;default:self._handleResponseField(response)}}}),await self.serial.connect()}_emit(eventName,value){const self=this;self.listenerCount(eventName)>0&&self.emit(eventName,value)}_handleResponseField(response){const self=this,{code:code,status:status,fieldData:fieldData}=response.data;if(0===code){const field=self._currentField;self._currentField=void 0;const type=field.type.toUpperCase(),summary={name:self._getFieldNameById(field.id),value:self._readFieldData(fieldData,field.type),status:status};switch(type){case"LONG":case"FFLOAT":case"UFLOAT":case"SFLOAT":case"INTEGER":case"VOLUME":if(self._summarize(summary)){const data=_RECEIVED_DATA[summary.name];self._emit(summary.name,{name:summary.name,value:{meter:{start:data.summary.value.start,finish:data.summary.value.finish,total:Math.abs(data.summary.value.total)},time:data.summary.time._summary},status:status})}self._setAttribute(summary.name,summary.value),self._emit("data",summary);break;case"LIST":const parsedList=self._parseList(summary,field.n);self._setAttribute(parsedList.name,parsedList.value),self._emit("data",parsedList);break;case"TEXT":self._setAttribute(summary.name,summary.value),self._emit("data",summary)}}else self._emit("failed",{name:self._getFieldNameById(field.id),...self._parseReturnCodes(response.data.code)})}_parseReturnCodes(code){return{code:code,msg:_RCODES[code]?_RCODES[code]:void 0}}_parseList(summary,n){return{name:summary.name,value:_LIST[n]?_LIST[n][summary.value]:summary.value,status:summary.status}}_summarize(data){const self=this;let status=!1;return _RECEIVED_DATA[data.name]||(_RECEIVED_DATA[data.name]=new ___RECEIVED_DATA__(data.value)),_RECEIVED_DATA[data.name].lastValue!==data.value&&(_RECEIVED_DATA[data.name].onProcess||(_RECEIVED_DATA[data.name].summary.value.start=_RECEIVED_DATA[data.name].lastValue,_RECEIVED_DATA[data.name].summary.time.start=new Date,_RECEIVED_DATA[data.name].onProcess=!0,_RECEIVED_DATA[data.name].summary.value.finish=null,_RECEIVED_DATA[data.name].summary.time.finish=null),_RECEIVED_DATA[data.name].sameValueTimer=Date.now()),_RECEIVED_DATA[data.name].onProcess&&_RECEIVED_DATA[data.name].lastValue===data.value&&Date.now()-_RECEIVED_DATA[data.name].sameValueTimer>self._msLimit&&(_RECEIVED_DATA[data.name].summary.value.finish=data.value,_RECEIVED_DATA[data.name].summary.time.finish=new Date(Date.now()-self._msLimit),_RECEIVED_DATA[data.name].onProcess=!1,_RECEIVED_DATA[data.name].sameValueTimer=Date.now(),status|=!0),_RECEIVED_DATA[data.name].lastValue=data.value,status}_readFieldData(buffer,type){try{switch(type=type.toUpperCase()){case"TEXT":return buffer.slice(0,buffer.length-1).toString("utf8");case"LONG":case"VOLUME":return buffer.readInt32BE();case"FFLOAT":return buffer.readDoubleBE();case"UFLOAT":case"SFLOAT":return buffer.readFloatBE();case"BYTE":case"LIST600":case"LIST1000":case"LIST":return buffer.readInt8();case"INTEGER":return buffer.readInt16BE();default:throw`type '${type} is not found'`}}catch(error){return console.error("_readFieldData Error:",buffer,error),null}}_getFieldNameById(id){const self=this;if(!self._fieldNames){self._fieldNames={};for(const key in _FIELDS)self._fieldNames[_FIELDS[key].id]=key}return self._fieldNames[id]}_getFieldData(fieldNum,sync=!1){const packet=this.CRCinit().to().from().identifier().sync(sync).data([32,fieldNum]).build();return this.serial.write(packet)}_setFieldData(fieldNum,sync=!1){const packet=this.CRCinit().to().from().identifier().sync(sync).data([33,fieldNum]).build();return this.serial.write(packet)}_parseResponse(raw){const len=raw.length;return{header:[raw[0],raw[1]],to:raw[2],from:raw[3],status:raw[4],length:raw[5],_data:raw.slice(6,raw[5]+6),get data(){const code=this._data[0];return 0===code?{code:code,status:this._data[1],fieldData:this._data.slice(2)}:{code:code}},CRC:[raw[len-2],raw[len-1]]}}_setAttribute(key,value){return this.attributes[key]=value,this.attributes[key]}CRCinit(){return this.CRC=__HEADER__<<8|__HEADER__,this}to(addr=null){return this.message.to=null!=addr?addr:this.LCRNodeAddress,this}from(addr=null){return this.message.from=null!=addr?addr:this.hostAddress,this}identifier(){return this.message.status=bitops.use(this.message.status).bit(0).toggle(),this}sync(isSync=!1){return this.message.status=bitops.use(this.message.status).bit(1).set(+isSync),this}data(data=[0]){return this.message.data=data,this.message.length=this.message.data.length,this}build(){const self=this,message=[],updateCRC=byte=>{if(null!=self.CRC)for(let bit=7;bit>=0;--bit){const XORFlag=0!=(32768&self.CRC);self.CRC<<=1,self.CRC|=byte>>bit&1,XORFlag&&(self.CRC^=__POLYNOMIAL__)}},appendBytes=arrByte=>{const appended=[];for(const byte of arrByte)byte!==__ESC__&&byte!==__HEADER__||(appended.push(__ESC__),updateCRC(__ESC__)),appended.push(byte),updateCRC(byte);return appended};for(const key in self.message){const item=self.message[key];message.push(...appendBytes(Array.isArray(item)?item:[item]))}return[__HEADER__,__HEADER__,...message,(255&self.CRC)>>0,(65280&self.CRC)>>8]}getProductID(sync=!1){const packet=this.CRCinit().to().from().identifier().sync(sync).data([0]).build();return this.serial.write(packet)}getData(fieldName,sync=!1){if(!fieldName)throw"fieldName is Undefined";return this._currentField=_FIELDS[fieldName],this._getFieldData(this._currentField.id)}requestAttribute(fieldName){const self=this,__requestData=()=>new Promise(async(resolve,reject)=>{await self.getData(fieldName),self.attributes[fieldName]?resolve(self.attributes):setTimeout(()=>{resolve(__requestData())},100)});return __requestData()}getAttribute(key,onlyValue=!0){return key?onlyValue?this.attributes[key]:{[key]:this.attributes[key]}:this.attributes}setWaitingTime(msLimit=1e3){this._msLimit=msLimit}setDeviceAddress(deviceAddress){if("number"!=typeof deviceAddres)throw"Device address must be a number data type";const packet=this.CRCinit().to().from().identifier().sync().data([37,deviceAddres]).build();return this.LCRNodeAddress=deviceAddress,this.serial.write(packet)}setBaudRate(baudRate=19200){const baudIX={57600:0,19200:1,9600:2,4800:3,2400:4};if(void 0==baudIX[baudRate])throw"Accpeted Baud Rate: 57600, 19200, 9600, 4800, 2400";const packet=this.CRCinit().to().from().identifier().sync().data([124,baudIX[baudRate]]).build();return this.serial.write(packet)}}module.exports=LCR600;