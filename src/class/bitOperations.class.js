class bitops{convertBase(num,from,to){return parseInt(num,from).toString(to)}dec2bin(num){return this.convertBase(num,10,2)}bin2dec(num){return this.convertBase(num,2,10)}hex2bin(num){return this.convertBase(num,16,2)}bin2hex(num){return this.convertBase(num,2,16)}hex2dec(num){return this.convertBase(num,16,10)}dec2hex(num){return this.convertBase(num,10,16)}setBit(num,bitNumber){return num|1<<bitNumber}clearBit(num,bitNumber){return num&~(1<<bitNumber)}toggleBit(num,bitNumber){return num^1<<bitNumber}readBit(num,bitNumber){return(num&1<<bitNumber)>>bitNumber}use(num){if(Number.isInteger(num))return this.__used={num:num},this;throw"Error: number must be integer"}bit(bitNumber){if(Number.isInteger(bitNumber))return this.__used.bitNumber=bitNumber,this;throw delete this.__used,"Error: bitNumber is not integer"}get(){if(null==this.__used.num||null==this.__used.bitNumber)throw"Error: should call use() and bit() before calling get()";const value=this.readBit(this.__used.num,this.__used.bitNumber);return delete this.__used,value}set(bitValue){if(null==this.__used.num||null==this.__used.bitNumber)throw"Error: should call use() and bit() before calling set()";if(Number.isInteger(bitValue)){const value=1&+bitValue?this.setBit(this.__used.num,this.__used.bitNumber):this.clearBit(this.__used.num,this.__used.bitNumber);return delete this.__used,value}throw"Error: bitValue is not integer"}toggle(){if(null==this.__used.num||null==this.__used.bitNumber)throw"Error: should call use() and bit() before calling toggle()";const value=this.toggleBit(this.__used.num,this.__used.bitNumber);return delete this.__used,value}read(){return this.get()}write(bitValue){return this.set(bitValue)}}module.exports=new bitops;